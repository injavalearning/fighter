Java类的设计：

面向对象：
    面向对象是以对象为中心的编程思想，我只需要知道这个对象的功能，不需要知道它的工作原理，是一种抽象度更高的编程方法，
面向对象的三大特征：封装，继承，多态，封装目的是复用；继承目的是共用；多态目的是多种实现。

封装：
    封装是面向对象编程的核心思想，属性能够描述事物的特征，方法能够描述事物的行为。封装就是将对象的属性和方法封装起来，
将对象的属性和方法封装起来的载体就是类，类通常对用户隐藏其实现细节，向外界提供最简单的编程接口，用户无需知道内部的
实现细节，只用对接口进行操作就行了，这就是封装的思想。

继承：
    继承是从已有类得到继承信息创建新类的过程，提供继承信息的类称为父类，得到继承信息的类称为子类。Java不支持多继承，
一个类只能有一个父类。

多态：
一：多态的定义：
    多态就是指程序中定义的引用变量（即 A a = new B(); 的a）所指向的具体类型和通过该引用变量发出的方法调用在编程时并
不确定，而是在程序运行期间才确定。即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实
现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑
定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，
让程序可以选择多个运行状态，这就是多态性。

二：多态存在的三个必要条件：
1、继承
2、重写
3、父类引用指向子类对象

三：父类引用指向子类对象：
1、向上转型：我定义了一个子类Cat，它继承了Animal类，那么后者就是前者的父类。Animal a = new Cat(); 由于Cat是继承自它的
父类Animal，所以Animal类型的引用是可以指向Cat类型的对象的，这就是“向上转型”。
A a = new B();
A的对象可以访问B从A中继承来的方法和B重写A的方法，其它的方法都不能访问，包括A中的私有成员方法和B中新定义的方法。
变量不能被重写（覆盖），重写的概念只针对方法，即a只访问自己的变量，a也只访问自己类中用static声明的方法。
2、作用：因为子类是对父类的一个改进和扩充，所以一般子类在功能上较父类更强大，属性较父类更独特，定义一个父类类型的引用
指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。所以，父类类型的引用可以调用父类中定义的所有属性和
方法，而对于子类中定义而父类中没有的方法，父类引用是无法调用的。

四：动态绑定（dynamic binding）：
    实现多态的技术称为动态绑定，是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。

重载（overloading）和重写（overriding）：
1、方法重载：重载发生在同一个类中，同名的方法有不同的参数列表（参数个数不同或者参数类型不同），调用方法时通过传递给它们
的不同参数个数和参数类型来决定具体使用哪个方法。
2、方法重写：重写发生在父类与子类之间，对父类的方法进行重新定义。如果在子类中定义某方法与其父类有相同的名称和参数，
我们说该方法被重写。如需父类中原有的方法，可使用super关键字。要比父类被重写方法更好访问。

重载到底是不是多态：
    网上有的说是有的说不是，个人观点：重载不是多态，但是体现了多态性。对于编译器而言，重载的同名方法因为传参的不同就成
了不同的方法，它们的调用地址在编译期就绑定了，称为“早绑定”或“静态绑定”。而多态只有等到方法调用的那一刻，编译器才会
确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。早绑定出现在编译期，晚绑定出现在运行期。






