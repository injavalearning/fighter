Java基本语法及关键字：

一、数据类型
    Java有8种基本类型，其中有4种整型、2种浮点型、1种char型，1种boolean型。
    int：4 字节（1字节为8位），范围 -2147483648（-2^31）— 2147483647（2^31-1）（21亿，切记：一些编程题可能需要用long）
    short：2 字节，范围 -32768 — 32767
    long：8 字节，范围 -2^63 — 2^63-1，一些编程题需要用long型才能AC
    byte：1 字节，范围 -128 — 127（-2^7 — 2^7-1）
    float：4 字节
    double：8 字节
    char：字符型，用于存储单个字符（现在有些需要两个），占16位，即2个字节
    boolean：1个字节，true 或 false
    为什么8位有符号数的取值范围为 -128 — 127？
    答：8位二进制,最高位是符号位,所以0开头的是正数,1开头是负数。负数部分为：1000 0000，为-2^7 — -1，
        正数部分为：0111 1111，为0 — 2^7-1


二、static关键字
    static表示静态，它可以修饰变量、方法和代码块，被static修饰的成员称为静态成员或类成员，它属于整个类所有，而不是某个
对象所有，即被类的所有对象所共享。类中标注了static的变量或方法能在类外直接引用，即通过类名.静态变量 或类名.静态方法
来引用，而没有标注static的变量或方法则必须声明这个类的实体，由实体来引用。
    static变量：被static修饰的变量叫静态变量或类变量；没有被static修饰的变量叫实例变量。静态变量是随着类加载时被完成
初始化的，它在内存中仅有一个，且JVM也只会为它分配一次内存，同时类所有的实例都共享静态变量，可以直接通过类名来访问它。
但是实例变量则不同，它是伴随着实例的，每创建一个实例就会产生一个实例变量，它与该实例同生共死。
    在Java中static不允许用来修饰局部变量，C/C++中可以。
    静态方法：静态方法的好处就是不用生成类的实例就能直接调用，只要通过类名就可以访问，不需要耗费资源反复创建对象，因为
在程序第一次加载的时候就已经在内存中了，直到程序结束该内存才会释放。被static修饰的方法内部不能访问非static的变量和方法，
因为非静态成员变量/方法都是必须依赖具体的对象才能够被调用，而static方法属于整个类所有，可以直接通过类名.静态方法调用，
不一定有对象实例（意思就是我可以不用new一个对象实例而直接通过类名.静态方法调用这个方法，如果static方法里有非静态成员
变量/方法，因为这时候没有对象实例，所以会报错。注意：如果调用之前先new一个对象是可以调用非static方法的）。非static方法
内部可以访问static成员的方法和变量。


三、String、StringBuffer、StringBuilder
1、三者的区别：
①：都是final类，都不允许被继承
②：String长度是不可变的，StringBuffer、StringBuilder长度是可变的
③：StringBuffer是线程安全的，StringBuilder不是线程安全的，它们有相同的方法，StringBuffer在StringBuilder的方法上添加了
synchronized修饰，保证线程安全
④：执行速度：StringBuilder > StringBuffer > String，因为String是字符串常量，而StringBuffer和StringBuilder都是字符串
变量，String对象一旦创建之后该对象是不可更改的，对String对象的任何改变都不影响到原对象，相关的任何操作都会生成新的对象；
但后两者的对象是变量，是可以更改的

2、对String不变性的理解：
    String类是被final修饰的，不能被继承。一旦一个String对象在内存中创建，它就是不可改变的，所有的String类中方法并不是
改变String对象自己，而是重新创建一个新的String对象，在用 + 连接字符串的时候也会创建新的字符串。

3、String重写了Object的hashCode和toString吗？如果重写equals不重写hashCode会出现什么问题？
    String重写了Object类的hashCode和toString方法，Object类的hashCode()返回对象的内存地址经过处理后的结构，String类的
hashCode()返回哈希值；Object类的toString()方法返回该对象实现类的“类名 + @ + hashcode值”，String类的toString()方法
返回这个字符串本身。
    hashCode()和equals()都可以用来比较两个对象是否相等，重写的equals()一般比较全面比较复杂，效率比较低，而hashCode()
只要生成一个hash值比较就可以了，效率比较高，但是并不是完全可靠，有时候不同的对象它们生成的hash值也会一样，所以：equals()
相等的两个对象它们的hashCode()肯定相等；hashCode()相等的两个对象它们的equals()不一定相等。如果重写了equals()不重写
hashCode()，将对象放入hash集合中时，因为两对象hashCode()不同，所以两个对象都会放入，但是这两个对象通过equals比较可能相等，
也就是两对象值相等，这样就造成了集合中存储了两个值相同的对象，这种做法是错误的（HashMap的Key）。
    注：HashSet和HashMap的存储机制：在存一个新对象的时候，先比较它跟已有对象的hashCode()是否相等，如果不等则直接存，不会
再调用equals方法进行判断；如果相等则再通过equals判断两对象值是否相等。


四、final、finally和finalize
1、final：
    final是修饰符，可以修饰类、方法、变量，保证它们在使用的过程中不被修改。被声明为final的变量必须在声明时给出变量的
初始值，在以后的引用中只能读取不能修改；final方法同样只能使用，不能在子类中被重写（可以重载）；final类不能被继承，不能
派生出子类，String、Math等都是final类。
2、finally：
    finally用在异常处理中，通常放在try...catch...的后面来执行任何的清除操作，无论异常是否发生，都会执行finally块的内容，
可以将释放外部资源的代码写在finally块中。
3、finalize：
    Object类中定义的方法，这个方法是由垃圾收集器在销毁对象时调用的，Java中允许使用finalize()方法在垃圾收集器将对象从内存
中清除出去之前做必要的清理工作，通过重写finalize()方法可以整理系统资源或者执行其他清理工作。


五、java中==和equals的区别
1、== 如果作用于基本数据类型的变量，直接比较值是否相等；如果作用于引用类型的变量，比较的是所指向的对象的地址(是否是同一
个对象)。
2、equals方法不能作用于基本数据类型的变量；如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；
String、Date等类对equals方法进行了重写，比较的是所指向的对象的内容是否相等。


六、Object中的方法
    hashCode()、equals()、toString()、wait()、notify()、notifyAll()


七、抽象类（abstract class）和接口（interface）
1、抽象类：
    含有abstract修饰符的类即为抽象类，Java中声明一个类时，可以不给出该类的所有实现细节，然后再定义一个或者多个子类继承
抽象父类，重用父类中的代码、扩充并实现其未实现的功能。
    abstract类不能创建实例对象。含有abstract方法的类必须定义为abstract class，但abstract class类中的方法不必是抽象的。
abstract class类中定义的抽象方法必须在具体子类中实现，所以不能有抽象构造方法或抽象静态方法（因为子类不能重写父类的构造
方法，static方法可以被继承，但不能被重写）。如果子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。
    public abstract class Animal{
        //声明抽象方法
        public abstract void fun();
    }

    public class Person extends Animal{
        public void fun(){
            System.out.println("玩耍");
        }
    }

2、接口：
    可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法默认为public abstract类型，接口中的成员变量
默认为public static final类型。


八、Java为什么不能多继承
1、若子类继承的父类中拥有相同的成员变量，子类在引用该变量时将无法判别使用哪个父类的成员变量
2、若子类继承的多个父类拥有相同方法，同时子类并未重写该方法（若重写，则直接使用子类中该方法），那么调用该方法时将无法
确定调用哪个父类的方法
    注：一个类可以实现多个接口，但只能继承一个类