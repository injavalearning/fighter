Java多线程：

进程：
是系统进行资源分配和调用的独立单位，每一个进程，都有它自己的内存空间和系统资源。进程指的是程序执行时的一个实例，
程序一旦运行就是一个进程

线程：
是进程的执行单元、执行路径，线程是CPU调度的基本单位

同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈等），一个进程至少包括一个线程
一个线程不能独立的存在，它必须是进程的一部分
开启多个线程是为了同时运行多部分代码，多线程能满足程序员编写高效率的程序来达到充分利用CPU的目的

多进程是指操作系统能同时运行多个任务（程序）
多线程是指在同一程序中有多个顺序流在执行
JVM启动时就启动了多个线程，至少有两个线程可以分析出来
1、执行main函数的线程
2、负责垃圾回收的线程

并发：
通过CPU调度算法，让用户看上去同时执行，实际上是通过CPU在高度切换并不是真正的同时

并行：
多个CPU实例或者多台机器同时执行一段处理逻辑，这就是真正的同时

Java实现多线程的两种方式：
方式一：1、继承Thread类
        2、重写Thread类的run方法，并且将线程要执行的代码存放到run方法中
        3、创建继承Thread类的子类的对象，也就是创建线程
        4、线程对象调用start方法，开启线程，线程会自动执行run方法
run()方法与start()方法：run()方法里面存放着Thread线程对象需要执行的代码，调用start()方法，让所创建的线程处于就绪状态
方式二：1、实现Runnable接口
           存放线程执行代码的类去实现(implements) Runnable接口
        2、重写所实现接口的run方法，并将线程执行代码存放在run方法中
        3、创建Thread对象，也就是创建线程
        4、Thread线程对象调用start方法，启动线程
两种方式的比较：
实现Runnable接口的方式要好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，面向接口编程也是设计模
式6大原则的核心

线程的生命周期（五种状态）：
新建状态、就绪状态、运行状态、阻塞状态、死亡状态

