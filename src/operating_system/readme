一、死锁
1、定义：
    死锁指多个线程或进程循环等待它方占有的资源而无限期僵持下去的局面，如果没有外力作用将无法推进，这种情况就是死锁。

2、死锁产生的必要条件：
    ①、互斥：两个进程共同操作一个资源，同一时间只能一个进程来操作，另一个进程必须等待，此进程不释放，另一个永远等待。
    ②、不可以强占：一个进程占有某一个资源，另一个不可以强行占有我的资源。
    ③、请求保持：我占有一个资源，又对其它资源发出请求，但是该资源可能被其它进程占有，此时请求阻塞，但又对自己的资源不放
    ④、循环等待：a等待b释放资源，b等待c释放资源，c等待a释放资源，循环等待。

3、死锁的处理方法（预防和避免）：
    ①、死锁预防：在程序运行之前预防发生死锁，确保系统永远不会进入死锁状态。死锁的产生有四个必要条件，破坏其中一个条件
就能解决死锁。例如：允许进程强行从占有者那里夺取某些资源、实行资源有序分配策略。
    ②、死锁避免：在程序运行时避免发生死锁，在使用前进行判断，只允许不会出现死锁的进程请求资源。常用的技术有：
<1>、设置加锁顺序：确保所有的线程都是按照相同的顺序获得锁。
<2>、设置加锁时限：在尝试获取锁的时候加一个超时时间，若超时则放弃对锁的请求。
<3>、死锁检测：利用数据结构（map、graph）记录线程请求和获取锁的情况，当一个线程请求锁失败时，遍历锁的关系图看看是否有
死锁发生。
<4>、银行家算法：一个银行家向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是
则拒绝请求，否则予以分配。
    注：银行家算法图里，Has表示已拥有的资源数，Max表示总共需要的资源数、Free表示还可以使用的资源数。(b)中先把Free的2个
资源给C，运行结束释放C，此时Free变为4，接着给B，运行结束释放B，接着以同样的方式运行A和D。


二、进程通信

三、线程通信