一、TCP和UDP：因特网上的应用使用的两个传输层协议
1、TCP：
    传输控制协议（Transmission Control Protocol），提供面向连接的服务和可靠的数据传输服务，面向连接的服务是指通过三次
握手建立连接，连接是全双工的，连接双方可以同时进行报文收发，通讯完成时要拆除连接；可靠的数据传输服务是指进行通信的进程
依靠TCP协议，以无差错、按适当顺序交付发送的数据。由于TCP是面向连接的所以只能用于端到端的通讯，它还具有拥塞控制机制，当
发送方和接收方之间的网络出现拥塞时，TCP的拥塞控制机制会抑制发送进程。

2、UDP：
    用户数据报协议（User Datagram Protocol），是一个轻量级的传输协议，提供不可靠的数据传输服务，UDP是无连接的，在
进程通信前没有握手过程，当进程通过UDP协议的套接字发送报文时，UDP不保证报文能被接收进程接收到，而且接收进程接收到的报文
也可能是乱序到达的。UDP没有拥塞控制机制，发送进程可以用任何速率向UDP协议的套接字交付数据。

3、应用场景：
    TCP是可靠的但传输速度慢，UDP是不可靠的但传输速度快。因此TCP主要用于FTP（文件传输协议）、Telnet（远程登录协议）、
SMTP（简单邮件传输协议）、POP3（和SMTP相对，用于接收邮件）、HTTP协议等，例如电子邮件、文件传输、万维网。UDP主要用于
TFTP（简单文件传输协议）、SNMP（简单网络管理协议）、DNS（域名解析协议）、NFS、BOOTP等，例如视频传输、实时通信。

4、区别总结：
    ①：TCP是面向连接的，在通信之前要先建立连接，结束通信时要释放连接；UDP是无连接的，发送数据之前不需要建立连接。
    ②：TCP提供可靠交付的服务，UDP尽最大努力交付，但不保证交付的可靠性。
    ③：TCP连接只能有两个端点，是点对点（一对一）的连接方式；UDP支持一对一、一对多、多对一和多对多的交互通信。
    ④：TCP有拥塞控制机制，UDP没有拥塞控制，出现网络拥塞时发送方也不会降低发送速率。

5、三次握手：
    即建立TCP连接，是指建立一个TCP连接时，需要客户端和服务端总共发送3次包以确认连接的建立。在socket编程中，这一过程由
客户端执行connect来触发，流程如下：
    ①、第一次握手：客户端将标志位SYN置为1，随机产生一个值seq = J(seq是序列号)，并将该数据包发送给服务器，客户端进入
SYN_SENT状态，等待服务器确认。
    ②、第二次握手：服务器收到数据包后由标志位SYN = 1知道客户端请求建立连接，服务器将标志位SYN和ACK都置为1，
ack(number) = J + 1，随机产生一个值seq = K，并将数据包发送给客户端以确认连接请求，服务器进入SYN_RCVD状态。
    注：ACK是确认字符，seq是数据包本身的序列号，ack是期望对方继续发送的那个数据包的序列号。
    ③、第三次握手：客户端收到确认后，检查ack是否为J + 1，ACK是否为1，如果正确则将标志位ACK置为1，ack = K + 1，并将
该数据包发送给服务器，服务器检查ack是否为K + 1，ACK是否为1，如果正确则连接建立成功，客户端和服务器进入ESTABLISHED状态，
完成三次握手，随后客户端和服务器之间可以开始传输数据了。

6、四次挥手：
    即终止TCP连接，是指断开一个TCP连接时，需要客户端和服务器总共发送4次包以确认连接的断开。在socket编程中，这一过程由
客户端或服务器任一方执行close来触发。因为TCP连接是全双工模式，因此每个方向都必须要单独进行关闭，这一原则是当一方完成
数据发送任务后，发送一个FIN（结束标志）来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到
数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN，首先进行关闭的一方将执行主动关闭，而另一方执行被动
关闭，过程如下：
    ①、第一次挥手：客户端（或称主动关闭方，可以是客户端，也可以是服务器端）发送一个FIN，用来关闭客户端到服务器（被动
关闭方）的数据传递，客户端进入FIN_WAIT_1状态。
    ②、第二次挥手：服务器收到FIN后，发送一个ACK给客户端，确认序号为收到序号 + 1（假定FIN = M，此时ACK = M + 1），服务器
进入CLOSE_WAIT状态。
    ③、第三次挥手：服务器发送一个FIN，用来关闭服务器到客户端的数据传递，服务器进入LAST_ACK状态。
    ④、第四次挥手：客户端收到FIN后，进入TIME_WAIT状态，接着发送一个ACK给服务器，确认序号为收到序号 + 1，服务器进入
CLOSED状态，完成四次挥手。
    注：TIME_WAIT状态需要经过2MSL（MSL为报文最大生存时间，是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃），
才能进入CLOSED状态，TIME_WAIT状态是用来重发可能丢失的ACK报文。

7、为什么TCP连接需要三次握手，两次不行吗？
    三次握手是为了防止已失效的连接请求报文段突然又传到了服务器，会产生错误。
    例如：客户端发送的第一个连接请求报文段因为网络阻塞了，延迟了一段时间后到达服务器，本来这是一个已经失效的报文段，
但是服务器会认为是客户端再次发出的一个新的连接请求，于是就向客户端发送确认报文段，同意建立连接。假设不采用三次握手，
那么只要服务器发出确认，新的连接就建立了，但其实这是一个之前发的已经失效的报文段（客户端会进行超时重传发送新的报文段），
所以客户端不会理睬服务器的确认，也不会向服务器发送数据，但服务器会一直等待客户端发送数据，造成了服务器资源的浪费。
采用三次握手就可以避免这种情况发生，第三次握手客户端不会向服务器发出确认，服务器收不到确认就不会建立连接。


二、从用户在浏览器输入域名，到浏览器显示出页面的过程（在浏览器中输入www.baidu.com后执行的全部过程）
1、在浏览器中输入网址
    例如：www.baidu.com
2、应用层DNS解析域名
    客户端浏览器先检查本地是否有对应的IP地址，如果有则返回响应的IP地址，如果没有则向DNS服务器查询网站IP地址，DNS服务器
返回网站IP地址（如:119.75.217.56）
3、客户端浏览器与WEB服务器建立TCP连接
    注：只有低层协议建立连接之后才能进行高层协议的连接，因此HTTP协议是基于TCP协议传输的，首先需要传输层建立TCP连接
4、浏览器向对应IP地址的WEB服务器发送HTTP或HTTPS请求
5、服务器接收到请求后，根据HTTP请求报文的参数查找请求的资源，返回响应报文，返回相应的HTML文件
6、客户端浏览器下载数据，解析HTML源文件，组织成用户可以查看的网页形式


三、HTTP报文格式
    HTTP有两类报文：请求报文和响应报文
1、请求报文：
    一个HTTP请求报文由请求行（request line）、请求头（header）、空行和请求数据（请求正文）4部分组成，格式如下：
    ＜request-line＞ 请求行
    ＜headers＞ 请求头
    ＜blank line＞ 空行
    ＜request-body＞ 请求体
    ①、请求行：请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。请求方法有GET、POST、HEAD、
PUT、DELETE、OPTIONS、TRACE、CONNECT，例如：GET /index.html HTTP/1.1。
    ②、请求头部：请求头部由key:value键值对组成，每行一对，key和value用冒号“:”分隔，用于通知服务器关于客户端请求的信息，
例如：Accept：客户端可识别的数据类型，User-Agent：产生请求的浏览器类型，Host：请求的主机名，Content-Length：文本长度，
Cookie：一些Cookie信息，客户端发送给服务器端的身份标识，最重要的请求头信息之一。
    ③、空行：告诉服务器请求头部到此为止。
    ④、请求数据：如果请求方法字段是GET，则此项为空，没有数据；如果请求方法字段是POST，通常放置的就是要提交的数据，POST
方法适用于需要客户填写表单的场合。

2、响应报文：
    格式跟请求报文类似，由状态行、响应头、空行、响应体组成，格式如下：
    ＜status-line＞
    ＜headers＞
    ＜blank line＞
    ＜response-body＞
    ①、状态行：状态行一般由协议版本、状态码及其描述组成，例如：HTTP/1.1 200 OK，200是状态码，OK为状态码的描述，表示请求
已成功，请求所希望的响应头或数据体将随此响应返回。
    ②、响应头：响应头也由key:value键值对组成，用于描述服务器的基本信息，以及数据的描述。其中Set-Cookie：向客户端浏览器
发送Cookie，客户端浏览器会把Cookie保存起来，并且在后续的http请求中自动发送这个Cookie到服务器端，直到这个Cookie过期。
    ③、空行：响应头部到此为止。
    ④、响应体：响应的消息体，如果是纯数据就返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码。


四、http和https的区别
1、http是超文本传输协议，https是具有安全性的ssl加密传输协议。
2、http是HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器都无法验证对方的身份。
3、https是HTTP运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密。
4、http和https使用的端口不一样，前者是80，后者是443。


五、Cookie和Session的区别
    HTTP是一种无状态的协议，为了分辨请求是谁发起的，就需要我们自己去解决这个问题，不然有些情况下即使是同一个网站我们每
打开一个页面也都要登录一下，Cookie和Session就是用来解决这个问题的会话跟踪技术。Cookie通过在客户端记录信息确定用户身份，
Session通过在服务器端记录信息确定用户身份。
1、Cookie：
    Cookie技术是客户端的解决方案，Cookie就是由服务器发给客户端的特殊信息，这些信息以文本文件的方式存放在客户端，然后
客户端每次向服务器发送请求的时候都会带上这些特殊的信息（相当于客户的通行证）。
    一个Cookie的设置以及发送过程分为以下四步：客户端发送一个http请求到服务器端；服务器端发送一个http响应到客户端，其中
包含Set-Cookie头部；客户端发送一个http请求到服务器端，其中包含Cookie头部；服务器端发送一个http响应到客户端。

2、Session：
    Session技术是服务器端的解决方案，使用上比Cookie简单一些，相应的也增加了服务器的存储压力（相当于服务器上的客户明细表）
    Session在服务器端程序运行的过程中创建，在Session中可以存放信息，保存在服务器端。在创建Session的同时，服务器会为该
Session生成唯一的Session id，然后将这个Session id放入到Cookie中发送到客户端，当客户端再次发送请求的时候，会将这个
Session id带上，服务器接收到请求之后就会根据Session id找到相应的Session。

3、区别总结：
①、Cookie和Session是两种会话跟踪技术，Cookie是客户端的解决方案，Session是服务器端的解决方案。
②、Session是依赖Cookie的，如果Cookie被禁用，Session也会失效。
③、Session过多的时候会消耗服务器资源，Session会在一定时间内保存在服务器上。当访问增多，会比较占用服务器的性能，考虑
服务器性能的话，应该使用Cookie。
④、Cookie不是很安全，别人可以分析存放在本地的Cookie进行Cookie欺骗，考虑安全的话应该用Session。
    注：https://www.cnblogs.com/andy-zhou/p/5360107.html


六、基本概念
1、端系统：
    也被称为主机（host），主机 = 端系统，可以进一步划分为两类：客户机（client）和服务器（server）。客户机程序（client
program）是运行在端系统上，发出请求并从运行在另一个端系统上的服务器程序接收服务的程序。客户机/服务器应用程序是分布式
应用程序，通过因特网互相发送报文进行交互，在这个层次上，路由器、链路和其它因特网服务的架构组成“黑盒子”，在因特网应用
程序的分布式通信部件之间传输报文。

2、面向连接服务：
    面向连接的服务就是通信双方在通信时，要事先建立一条通信线路（握手过程），其过程有建立连接、使用连接和释放连接三个
过程。TCP协议就是一种面向连接服务的协议，电话系统是一个面向连接的模式。

3、无连接服务：
    网络系统允许一台计算机在任何时刻发送数据给任何一台其它的计算机的特性。UDP协议就是一种无连接服务的协议，书信往来是
一个无连接的模式。

4、网络上的进程通信：
    进程通过它的套接字在网络上发送和接收报文，进程的套接字可以理解为该进程的门户，套接字也叫做应用程序和网络之间的
应用程序接口。Socket（套接字）= IP address + TCP/UDP + port


七、分层的体系结构
1、分层作用：
    一个分层的体系结构允许我们讨论一个大而复杂系统的一个明确、特定的部分。当一个系统具有分层结构，改变由该层所提供的
服务也要容易得多。只要该层对其上面的层提供相同的服务，并且使用来自下面层次的相同服务，当某层实现变化时，该系统的其余
部分保持不变。（例如登机口登机的方式被改变了，不再排队登机而是按身高登机，这时候航线的其余部分将保持不变，因为登机口
仍然提供相同的功能（人们登机），改变后它仅是以不同的方式实现该功能。

                        票务（购买）                              票务（投诉）
                        行李（托运）                              行李（认领）
                        门（登机）                                门（离机）
                        跑道起飞                                  跑道着陆
                        飞机飞行                                  飞机飞行
                                            飞机飞行

2、PDU（Protocol Data Unit）：
    分层网络结构中，每一层都将建立协议数据单元（PDU），PDU是指对等层次之间传递的数据单位（逻辑上对等层次传递，即这个
数据单位最终需要到达接收端的对等层）。每层PDU包含来自上层的信息（或者说报文，报文就是数据块）和当前层附加的信息，这个
PDU会被传送到下一较低的层。物理层实际以一种编帧的位流形式传输这些PDU，这些PDU由协议栈的较高层建造。接收系统自下而上传送
这些分组通过协议栈，并在协议栈的每一层分离出PDU中的相关信息。
    假设有一个将通信协议组织成4个层次的网络，将有4种类型的PDU：1-PDU、2-PDU、3-PDU和4-PDU。运行在最高层次的应用层产生
一个报文M，M本身可能由不同的字段组成，这些字段可能包括发送方的名字、标明该报文类型的编码和某些附加的数据。

                    初始报文 M                                                           M
            |H3|M1|           |H3|M2|     3-PDU                              |H3|M1|           |H3|M2|
     |H2|H3|M1|                    |H2|H3|M2|    2-PDU                |H2|H3|M1|                    |H2|H3|M2|
|H1|H2|H3|M1|                           |H1|H2|H3|M2|   1-PDU   |H1|H2|H3|M1|                           |H1|H2|H3|M2|
                        源                                                             目的地

    在源主机中，报文M的所有内容向下“传送”到第三层，第三层将4-PDU分割为两个部分M1和M2，源主机的第三层为M1和M2增加所谓
首部（header），生成两个第三层PDU。该首部包括第三层接收方和第四层发送方所需要的附加信息，以实现第三层向第四层提供的服务。
源主机继续其处理过程，每个层次增加更多的首部信息，直到1-PDU，目的地主机接收1-PDU并将它们沿协议栈向上传递。在每个层次，
对应的首部被去除。最后，M1和M2被装配成M，然后传递给相关的应用程序。
    注意：第n层使用了第n-1层的服务。例如第四层生成了报文M，它将向下往第三层传递该报文，并且在目的地端依靠第三层提供的
服务将该报文传递到第四层。举个例子：当你写信时，随信包括诸如目的地地址和返回地址等信封信息，该信连同这些地址信息被认为
是该协议栈最高层的PDU，然后你把这个PDU丢进邮箱中。这封信将不再受你的控制，邮政服务会在这封信上增加某些它自己的内部信息，
相当于为该信增加一个首部，美国会在信封上打印一个条形码。

3、层功能：
1、分段和重装：在发送端将大的数据块分割为较小的块，并在接收端将这些较小的块重装成原来的大块
2、连接建立：提供了与对等方握手
3、差错控制：使得在两个对等网络元素中层次间的逻辑信道更为可靠
4、流控制：避免用PDU过载一个较慢的对等方
5、复用：允许几个较高层会话共享一个较底层连接

4、协议栈：
    是指网络中各层协议的总和，因特网的协议栈由5个层次组成：物理层、数据链路层、网络层、传输层和应用层。每层PDU有特殊的
名字：位、帧、数据包、报文段和报文。
                    协议栈                       协议数据单元（PDU）
第5层：             应用层                         报文（message）
第4层：             传输层                         报文段（segment）
第3层：             网络层                         数据包（packet）
第2层：             数据链路层                     数据帧（frame）
第1层：             物理层                         数据位（bit）


八、各层总结
1、应用层：
①、Web：
    即万维网 world wide web 的缩写，是基于http协议进行交互的应用网络。通常所指 Web，就是用网页浏览器浏览网页这种网络
资源。Web Page 指网站内的网页，是由对象组成的，对象简单来说就是一个具有单个URL地址的文件，每个URL地址由两部分组成：存放
对象的服务器主机名和对象的路径名，例如：www.zhihu.com/question/19860216，www.zhihu.com就是主机名，/question/19860216是
路径名。浏览器是Web应用的用户代理，用于显示所请求的Web页。Web服务器用于贮存Web对象。
②、http协议：
    超文本传输协议HTTP（HyperText Transfer Protocol）是Web的核心，Http协议定义了Web客户机（如浏览器）是如何向Web站点
请求Web页以及服务器是如何将Web页传送给客户机的。Http协议是建立在TCP协议基础之上的，当浏览器需要从服务器获取网页数据的
时候，会发出一次Http请求，Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接
断开，这个过程是很短的，所以Http连接是一种短连接，是一种无状态的连接。所谓的无状态，是指浏览器每次向服务器发起请求的
时候，不是通过一个连接，而是每次都建立一个新的连接。如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住
一些信息状态。而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态，成为无状态连接。
    Http是无状态的短连接，TCP是有状态的长连接。Http建立在TCP的基础上，在每次请求完成后就把TCP连接关了，所以是短连接。
而我们直接通过Socket编程使用TCP协议的时候，因为我们自己可以通过代码区控制什么时候打开连接什么时候关闭连接，只要我们
不通过代码把连接关闭，这个连接就会在客户端和服务端的进程中一直存在，相关状态数据会一直保存着。
③、DNS：
    是域名系统（DomainNameSystem）的缩写，用来将域名转换为IP。域名便于人的记忆，而IP地址便于计算机网络设备的处理，
于是需要DNS来做前者到后者的转换。例如：http://zhidao.baidu.com 这是域名，http://172.16.17.150这是IP。DNS协议运行在
UDP之上。

2、传输层：
    传输层位于应用层和网络层之间，为运行在不同主机上的应用进程提供了逻辑通信功能。
    传输层为运行在不同主机上的进程之间提供了逻辑通信，而网络层提供了主机之间的逻辑通信。举个例子：两个家庭，每个家庭各
有12个孩子，每个孩子每周相互写一封信，因此每个家庭每周向另一个家庭发送144封信，第一个家庭的孩子A1负责收发邮件，第二个
家庭的孩子B1负责收发邮件，收集到的邮件交到路过家门口的邮车上，信件到达时这两个孩子也负责将信件分发到兄弟姐妹手中。在
这个例子中，邮政服务为两个家庭间提供逻辑通信，它将信件从一家送往另一家，而不是从一个人送往另一个人；另一方面，A1和B1这
两个孩子为兄弟姐妹之间提供逻辑通信，他们向兄弟姐妹收取交付信件。从兄弟姐妹们的角度来看，A1和B1是端到端交付过程的一部分
（即端系统部分）。
应用层报文 = 信封上的字符
进程 = 兄弟姐妹
主机（又称为端系统） = 家庭
传输层协议 = A1和B1
网络层协议 = 邮政服务（包括邮车）
传输层协议只工作在端系统，在端系统中，传输层协议将来自应用进程的报文移动到网络边界（即网络层）。
现在假定A1和B1外出度假，由A2和B2接替他们的工作，A2和B2年龄比较小，收发邮件的次数要少，偶尔还会丢失邮件。因此A2和B2并
没有提供和A1、B1相同的服务模型。类似的，计算机网络中可以安排多种传输层协议，每种协议为应用程序提供不同的服务模型。
A1和B1能够提供的服务显然受到了邮政服务能够提供的服务的限制。类似的，传输层协议所能提供的服务也受到了底层网络协议的服务
模型的限制。（时延和带宽）
    网络层协议有一个名字叫IP，全称是互联网协议。IP为主机之间提供逻辑通信，IP的服务模型是尽力交付服务，不做任何确保，所以
IP是不可靠服务。UDP和TCP最基本的任务是，将两个端系统间IP的交付服务扩展为运行在两个端系统上的进程之间的交付服务，将主机间
交付扩展到进程间交付被称为传输层的复用与分解。

3、网络层：
    传输层依赖于由网络层提供的主机到主机的通信服务，传输层使用网络层的服务而无需了解网络层是如何实现该服务的。
