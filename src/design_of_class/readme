Java类的设计：

多态：
一：多态的定义：
    多态就是指程序中定义的引用变量（即 A a = new B(); 的a）所指向的具体类型和通过该引用变量发出的方法调用在编程时并
不确定，而是在程序运行期间才确定。即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实
现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑
定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，
让程序可以选择多个运行状态，这就是多态性。

二：多态存在的三个必要条件：
1、继承
2、重写
3、父类引用指向子类对象

三：父类引用指向子类对象：
1、向上转型：我定义了一个子类Cat，它继承了Animal类，那么后者就是前者的父类。Animal a = new Cat(); 由于Cat是继承自它的
父类Animal，所以Animal类型的引用是可以指向Cat类型的对象的，这就是“向上转型”。
A a = new B();
A的对象可以访问B从A中继承来的方法和B重写A的方法，其它的方法都不能访问，包括A中的私有成员方法和B中新定义的方法。
变量不能被重写（覆盖），重写的概念只针对方法，即a只访问自己的变量，a也只访问自己类中用static声明的方法。
2、作用：因为子类是对父类的一个改进和扩充，所以一般子类在功能上较父类更强大，属性较父类更独特，定义一个父类类型的引用
指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。所以，父类类型的引用可以调用父类中定义的所有属性和
方法，而对于子类中定义而父类中没有的方法，父类引用是无法调用的。

