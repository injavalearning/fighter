分析函数：
    分析函数是Oracle专门用于解决复杂报表统计需求的功能强大的函数，它可以在对数据进行分组然后计算基于组的某种统计值，
并且每一组的每一行都可以返回一个统计值。
    分析函数带有一个开窗函数over()，包含三个分析子句:分组(partition by), 排序(order by), 窗口(rows) ，他们的使用形式
如下：over(partition by xxx order by yyy rows between zzz)。

分析函数和聚集函数的不同：
    普通的聚集函数用group by分组，每个分组返回一个统计值；而分析函数采用partition by分组，它和聚集函数（如group by）
不同的地方在于它能返回一个分组中的多条记录，并且每组每行都可以返回一个统计值，而聚集函数一般只有一条反映统计值的记录。
partition by用于给结果集分组，如果没有指定那么它把整个结果集作为一个分组。
partition by 与group by不同之处在于前者返回的是分组里的每一条数据，后者只能返回聚集之后的组的数据统计值的记录。

一：ROW_NUMBER(),RANK()与DENSE_RANK()：求排序
1、ROW_NUMBER() OVER(PARTITION BY COLUMN ORDER BY COLUMN)
用作分组排序，对表按某一列名分组，在每组中按某列名排序，然后基于每组显示每行的行号
ROW_NUMBER()从1开始，为每一条分组记录返回一个数字，row_number()值相同时排名不相等，其后排名连续不跳跃
示例1： ROW_NUMBER() OVER(ORDER BY degree DESC)，先按分数降序排序，再显示行号
degree      row_num
100            1
96             2
89             3
78             4
示例2：
empid       deptid      salary
--------------------------------
1           10          5500.00
2           10          4500.00
3           20          1900.00
4           20          4800.00
5           40          6500.00
6           40          14500.00
7           40          44500.00
8           50          6500.00
9           50          7500.00
需求：根据部门分组，显示每个部门的工资等级

预期结果：
empid      deptid       salary             rank
--------------------------------------------------
1           10          5500.00              1
2           10          4500.00              2
4           20          4800.00              1
3           20          1900.00              2
7           40          44500.00             1
6           40          14500.00             2
5           40          6500.00              3
9           50          7500.00              1
8           50          6500.00              2
SQL语句：SELECT *,ROW_NUMBER() OVER(PARTITION BY deptid ORDER BY salary DESC) rank FROM employee;

2、RANK() OVER(PARTITION BY COLUMN ORDER BY COLUMN)
类似ROW_NUMBER()，区别：rank()值相同时排名相同，其后排名跳跃不连续

3、DENSE_RANK() OVER(PARTITION BY COLUMN ORDER BY COLUMN)
类似ROW_NUMBER()，区别：dense_rank()值相同时排名相同，其后排名连续不跳跃

二：LEAD和LAG
LAG：访问一个分区或结果集中前面的行，LEAD：访问一个分区或结果集中后面的行。可以用于求增幅或者增比计算。
LAG(EXPRESSION, OFFSET, DEFAULT) OVER(PARTITION BY COLUMN ORDER BY COLUMN)
LEAD(EXPRESSION, OFFSET, DEFAULT) OVER(PARTITION BY COLUMN ORDER BY COLUMN)
LAG和LEAD有三个参数，第一个参数是列名，第二个参数是偏移量，第三个参数指定了默认值，可以指定一个其它的返回值来修改。
例如：
SELECT year,week,sale,LAG(sale,1,sale) OVER(PARTITION BY sf.product ORDER BY sf.year,sf.week) prior_wk_sales
FROM sales_fact sf;
 year  week    sale        prior_wk_sales
-----------------------------------------
 1998    1     58.15          58.15
 1998    2     29.39          58.15
 1998    3     29.49          29.39
 1998    4     29.49          29.49
 1998    5     29.80          29.49
 1998    6     58.78           29.8
 1998    9     58.78          58.78
 1998   10    117.76          58.78
 1998   12     59.60         117.76
 ...

三：FIRST_VALUE和LAST_VALUE
FIRST_VALUE和LAST_VALUE常用在计算排过序的结果集中的最大值和最小值。
FIRST_VALUE(expression) OVER(PARTITION BY COLUMN ORDER BY COLUMN WINDOWING clause)
例如：SELECT year,week,sale,FIRST_VALUE(sale) OVER(PARTITION BY sf.product ORDER BY sf.year,sf.week rows between
unbounded preceding and unbounded following) prior_wk_sales FROM sales_fact sf;
窗口的上下边界条件通过子句rows between unbounded preceding and unbounded following指定。这是开窗子句，意思是处理数据的
范围为指定分区内的所有数据（从无限向前到无限向后）

四：NTH_VALUE
nth_value，可以获取排过序的结果集中的任意一行，而不仅是第一行或最后一行。
first_value = nth_value(column_name,1)
