一、树
1、树的高度和深度：
    对任意节点n，n的深度为从根到n的唯一的路径的长，根的深度为0；
    n的高是从n到一片树叶的最长路径的长，所有树叶的高都是0，一棵树的高等于它的根的高；
    一棵树的深度等于它的最深的树叶的深度，该深度总是等于这棵树的高

2、完全二叉树
    若设二叉树的深度为h，除第h层外，其它各层 (1～h-1) 的节点数都达到最大个数，第h层所有的节点都连续集中在最左边，这就是
完全二叉树。

3、二叉查找树（ADT）
    性质：对于树中的每个节点n，它的左子树中所有项的值小于n的值，它的右子树中所有项的值大于n的值

4、红黑树
    红黑树是一种特殊的二叉查找树，它在二叉查找树的基础上额外添加了一个标记（颜色），同时具有一定的规则，这些规则使红黑树
保证了一种平衡，插入、删除、查找的最坏时间复杂度都为o(logn)。
性质：
（1）每个节点要么是红的，要么是黑的。
（2）根节点是黑的。
（3）每个叶节点（NIL）是黑的。
（4）如果一个节点是红的，那么它的子节点必须是黑的。
（5）从任一节点到每个叶节点（NIL）的每一条路径都包含相同数目的黑色节点。
注：红黑树会用NIL哨兵节点来代替原来为NULL的叶节点

5、平衡二叉树（AVL）
    平衡二叉树是特殊的二叉查找树，它的每个节点的左子树和右子树的高度最多差1
    旋转：

6、B树（B是Balance，平衡多路查找树、平衡多叉树）
性质：
（1）树中的每个节点最多拥有m个子节点且m>=2，空树除外（m阶，当m = 2则是2叉树，m = 3则是3叉）
（2）除根节点外每个节点的关键字数量大于等于ceil(m/2)-1个小于等于m-1个，非根节点关键字数必须>=2（ceil()是个朝正无穷方向
取整的函数，例如ceil(1.1)结果为2）
（3）如果一个非叶节点有N个子节点，则该节点的关键字数等于N-1，所有节点关键字是按递增次序排列，并遵循左小右大原则
（4）所有节点包含了关键字和关键字记录的指针，另外也有指向其子节点的指针
（4）所有叶子节点均在同一层
如图B树图：
    图中节点比如根节点，17表示一个磁盘文件的文件名（关键字、索引），小红方块表示这个17文件内容在硬盘中的存储位置（数据
地址），p1表示指向17左子树的指针。

7、B+树
相对B树的变化：
（1）B+树的非叶子节点不保存关键字记录的指针，这样使得B+树每个节点所能保存的关键字大大增加；因为B+树的非叶子节点只进行
数据索引，不会存实际的关键字记录的指针，所有数据地址必须要到叶子节点才能获取到，所以每次数据查询的次数都一样
（2）B+树叶子节点包含了全部关键字的信息，其保存了父节点的所有关键字和关键字记录的指针
（3）所有叶子节点增加链指针，以关键字的大小按从小到大顺序链接形成一个链表，可以顺序遍历所有叶节点
（4）B+树的根节点关键字数量和其子节点个数相等
相对B树的优点：
B+树非叶子节点只存关键字，不存实际的数据地址，所以可以存储更多的关键字，树的层级更少，IO次数更少。所有叶子节点增加链指针
形成链表，并且叶子节点保存了父节点的所有关键字和关键字记录的指针，所以B+树不需要中序遍历，遍历链表即可。